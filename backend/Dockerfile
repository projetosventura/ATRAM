FROM node:18-alpine

WORKDIR /app

# Instalar ferramentas necess√°rias para compila√ß√£o e healthcheck
RUN apk add --no-cache curl sqlite python3 make g++

# Copiar package.json primeiro para aproveitar cache do Docker
COPY package*.json ./

# Remover node_modules se existir e instalar depend√™ncias
RUN rm -rf node_modules package-lock.json && npm install

# Copiar o resto do c√≥digo
COPY . .

# Criar diret√≥rios necess√°rios
RUN mkdir -p uploads data

# Criar script de inicializa√ß√£o
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "üöÄ Iniciando aplica√ß√£o..."' >> /app/start.sh && \
    echo 'echo "üìÅ Verificando diret√≥rios..."' >> /app/start.sh && \
    echo 'mkdir -p /app/data /app/uploads' >> /app/start.sh && \
    echo 'echo "üîÑ Executando migra√ß√µes do banco..."' >> /app/start.sh && \
    echo 'node /app/src/infrastructure/database/migrate-dolly-support.js || echo "‚ö†Ô∏è  Migra√ß√£o dolly-support j√° executada ou erro"' >> /app/start.sh && \
    echo 'node /app/src/infrastructure/database/migrate-dolly-semi-reboque.js || echo "‚ö†Ô∏è  Migra√ß√£o dolly-semi-reboque j√° executada ou erro"' >> /app/start.sh && \
    echo 'echo "‚úÖ Migra√ß√µes conclu√≠das"' >> /app/start.sh && \
    echo 'echo "üåü Iniciando servidor..."' >> /app/start.sh && \
    echo 'exec node /app/src/index.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expor porta
EXPOSE 3001

# Healthcheck para verificar se a API est√° respondendo
HEALTHCHECK --interval=5s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Comando para iniciar a aplica√ß√£o
CMD ["/app/start.sh"] 